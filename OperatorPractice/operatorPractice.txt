3rd theme : 연산자

=(할당 연산자) -> int num1 = 1 + 2; //1+2 값을 num1에 저장
C 언어에서는 ++, --라는 특별한 연산자 제공
++는 값을 1 증가, --는 값을 1 감소시키는 연산자
줄여서 증감연산자라고 부름, 증감연산자는 정수에서 1을 증가, 감소시킴 
포인터 연산에서는 자료형 크기만큼 증가, 감소시키기도 함
변수++	변수--	++변수	--변수 
num1++;	//num1을 1증가시킴-> 변수자체의 값을 바꿈 
//num1 = num1 + 1,num+=1과 같음 
증감연산자는 정수부분만 바뀌고 소수점 이하자리에는 영향을 미치지 않음
문자 자료형도 실제로는 정수여서 증감 연산자를
사용하면 1을 증가시키거나 감소시킴 , 아스키 코드값을 1 증감시킴
증감 연산자를 변수 뒤에 사용한 것을 후위 연산자라고 함
동작 순서 -> 1. 현재 변수의 값이 다른 변수에 할당됨(값 변동x) 
2. 증감 연산자가 수행되어 변수 값이 1 증감 
증감 연산자를 변수 앞에 사용한 것을 전위 연산자라고 함
동작 순서 -> 1. 증감 연산자가 수행되서 변수의 값이 1 증감 
2. 변수의 바뀐 값이 다른 변수에 할당됨
C 언어에서 정수/정수 = 정수 , 정수는 0으로 나눌 수가 없음 
변수로 해서 0으로 나누면 실행 에러 발생함 
실수 / 실수 = 실수 , 실수계산에서 특이한 점은 오차가 나온 다는 것
부록 참조, 실수도 0으로 나누면 컴파일 에러가 발생함
변수에 0을 저장해서 나누면 inf가 나옴 -> 부록참조
*= , /= -> 곱셈과 할당연산 연속처리, 나눗셈과 할당연산 연속처리
나머지 연산자(%)는 특정 수의 배수인지 확인할 때 사용함
몇 가지 상태로 강제할 때도 사용함, 0으로 나눈 나머지는 구할 수 없음 
서로 다른 자료형끼리 연산을 할 때는 정해진 규칙을 따름
정수와 실수의 연산 -> 결과는 실수 
실수의 범위가 정수보다 더 크기 때문에 표현 범위가 넓은 쪽으로 자동 변환됨
즉 정수에서 실수로 자동변환, 자료형을 섞어 쓰면 컴파일러에서 
암시적 형변환(implicit type conversation)을 함
자료형의 크기가 큰 쪽, 표현 범위가 넓은 쪽으로 자동변환됨
이를 형 확장(type promotion)이라함(값이 보전됨)
자료형의 크기가 작은 쪽, 표현 범위가 좁은 쪽으로
변환되는 것을 형 축소(type demotion)이라고 함
형 축소가 일어나면 값의 손실이 일어남, 컴파일 경고가 나오지 않게 하려면
형 변환(type conversation, type casting)을 해야됨
char num8 = 28;
int num9 = 1000000002;
char num10 = num8 + num9;
printf("%d\n", num10);
num10의 연산과정
num8 = 28 // 0001 1100
num9 = 1000000002
//0011 1011 1001 1010 1100 1010 0000 0010
num10 = 0011 1011 1001 1010 1100 1010 0001 1110
--------------------------------------==========
앞 자릿 수는 버림						  	사용
char 자료형의 크기에 맞게 저장되고 앞 자릿수는 버려짐
문자(정수)		정수					실수	  		   형 축소
			long long			long double	 ↑	↓
	  형 축소 long	   형 축소	double		 ↑  ↓
char  <---  int		   <---  	float		 ↑	↓
	  --->	short 	   --->				 	 ↑	↓
	  형 확장			   형 확장			   형 확장

조건문은 특정 조건일 때 코드를 실행, 조건식: == -> 두 값이 같을 때 
if 조건문 끝에 ;을 붙이면 if는 제대로 동작하지 않고
중괄호 안의 코드가 무조건 실행됨 
실제로는 if(num1 ==10);
printf("10 입니다.\n");
컴파일 에러가 나지 않는 이유는 코드를 중괄호로 감쌀 수 있기 때문임 
if 조건문에서 실행할 코드가 한 줄이면 중괄호를 생략할 수 있음 
만약 실행할 코드가 2줄이상 일 때 중괄호를 사용하지 않으면
첫 줄을 제외한 2번째 줄의 코드 부터는 if와 관계 없이 실행이 됨
if 조건문은 분기(branch)를 위한 문법임 
분기는 둘 이상으로 갈라지다 라는 의미임, 프로그램의 흐름을 둘 이상으로 나눔
if는 조건식을 만족할 때 else는 조건식을 만족하지 않을 때 실행 
프로그램이 if, else 두 방향으로 분기함 
else 뒤에 세미콜론을 붙이면 중괄호 안에 있는 코드가 조건과 관계없이 실행
if, else로 실행할 코드가 2줄 이상일 때 중괄호를 생략하면 컴파일 에러
if는 0일때 거짓, 0이 아닌 양수나 음수일 때 참
0.0일때 거짓, 그 이외의 실수는 참 
&&:논리연산자 -> 두 식이 모두 만족할 때 참이 됨
A <= B : A가 B보다 작거나 같으면 참,  
if가 거짓일 때 else if가 참이라면 밑에 코드 실행
else if도 끝에 세미콜론을 붙이면 안됨 
if, else if가 모두 거짓일 때 else 밑에 코드가 실행됨
else if는 여러 번 사용가능함
else if 앞에 else가 오면 컴파일 에러가 뜨므로 주의!
